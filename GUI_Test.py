# -*- coding: utf-8 -*-
import qdarkstyle
# Form implementation generated from reading ui file '.\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys, os
from PyQt5.QtWidgets import QMessageBox, QInputDialog, QTableWidgetItem, QTableWidget
from colorama import *
from configparser import ConfigParser

class Ui_MainWindow(QtWidgets.QWidget):


    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.conf = ConfigParser()
        self.conf.read('config.ini')
        self.wep_list = []
        self.wpa_list = []
        self.tp_link_list = []
        self.o2_list = []
        self.variables()
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1061, 589)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.button_csv_input = QtWidgets.QPushButton(self.centralwidget)
        self.button_csv_input.setGeometry(QtCore.QRect(80, 30, 391, 31))
        self.button_csv_input.setStyleSheet("color : rgb(0, 255, 255)")
        self.button_csv_input.setObjectName("button_csv_input")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(470, 60, 221, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_2.setGeometry(QtCore.QRect(540, 220, 521, 151))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 519, 149))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.button_info = QtWidgets.QPushButton(self.centralwidget)
        self.button_info.setGeometry(QtCore.QRect(810, 0, 131, 61))
        self.button_info.setStyleSheet("color : rgb(0, 153, 255)")
        self.button_info.setObjectName("button_info")
        self.csv_label = QtWidgets.QLabel(self.centralwidget)
        self.csv_label.setGeometry(QtCore.QRect(80, 0, 391, 31))
        self.csv_label.setObjectName("csv_label")
        self.button_settings = QtWidgets.QPushButton(self.centralwidget)
        self.button_settings.setGeometry(QtCore.QRect(680, 0, 131, 61))
        self.button_settings.setStyleSheet("color : rgb(0, 191, 95)")
        self.button_settings.setObjectName("button_settings")
        self.o2_total_label = QtWidgets.QLabel(self.centralwidget)
        self.o2_total_label.setGeometry(QtCore.QRect(360, 140, 291, 16))
        self.o2_total_label.setStyleSheet("color : rgb(234, 0, 255)")
        self.o2_total_label.setObjectName("o2_total_label")
        self.button_exit = QtWidgets.QPushButton(self.centralwidget)
        self.button_exit.setGeometry(QtCore.QRect(940, 0, 141, 61))
        self.button_exit.setStyleSheet("color : rgb(255, 0, 0)")
        self.button_exit.setObjectName("button_exit")
        self.wpa_total_label = QtWidgets.QLabel(self.centralwidget)
        self.wpa_total_label.setGeometry(QtCore.QRect(360, 120, 291, 16))
        self.wpa_total_label.setStyleSheet("color : rgb(0, 0, 255)")
        self.wpa_total_label.setObjectName("wpa_total_label")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(810, 60, 271, 41))
        self.textBrowser.setObjectName("textBrowser")
        self.scrollArea_4 = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_4.setGeometry(QtCore.QRect(540, 410, 521, 151))
        self.scrollArea_4.setWidgetResizable(True)
        self.scrollArea_4.setObjectName("scrollArea_4")
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 519, 149))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.scrollArea_4.setWidget(self.scrollAreaWidgetContents_4)
        self.wep_total_label = QtWidgets.QLabel(self.centralwidget)
        self.wep_total_label.setGeometry(QtCore.QRect(360, 100, 291, 16))
        self.wep_total_label.setStyleSheet("color : rgb(255, 85, 0)")
        self.wep_total_label.setObjectName("wep_total_label")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(0, 220, 521, 151))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 519, 149))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.tp_link_networks = QtWidgets.QLabel(self.centralwidget)
        self.tp_link_networks.setGeometry(QtCore.QRect(720, 370, 171, 41))
        self.tp_link_networks.setStyleSheet("color : rgb(33, 222, 0)")
        self.tp_link_networks.setObjectName("tp_link_networks")
        self.wpa_networks_label = QtWidgets.QLabel(self.centralwidget)
        self.wpa_networks_label.setGeometry(QtCore.QRect(720, 180, 171, 41))
        self.wpa_networks_label.setStyleSheet("color : rgb(0, 0, 255)")
        self.wpa_networks_label.setObjectName("wpa_networks_label")
        self.scrollArea_3 = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_3.setGeometry(QtCore.QRect(0, 410, 521, 151))
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 519, 149))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)
        self.wep_networks_label = QtWidgets.QLabel(self.centralwidget)
        self.wep_networks_label.setGeometry(QtCore.QRect(180, 180, 201, 41))
        self.wep_networks_label.setStyleSheet("color : rgb(255, 0, 0)")
        self.wep_networks_label.setObjectName("wep_networks_label")
        self.o2_networks_label = QtWidgets.QLabel(self.centralwidget)
        self.o2_networks_label.setGeometry(QtCore.QRect(180, 370, 131, 41))
        self.o2_networks_label.setStyleSheet("color : rgb(238, 0, 255)")
        self.o2_networks_label.setObjectName("o2_networks_label")
        self.button_scan = QtWidgets.QPushButton(self.centralwidget)
        self.button_scan.setGeometry(QtCore.QRect(470, 0, 211, 61))
        self.button_scan.setStyleSheet("color : rgb(179, 0, 255)")
        self.button_scan.setObjectName("button_scan")
        self.tp_link_label = QtWidgets.QLabel(self.centralwidget)
        self.tp_link_label.setGeometry(QtCore.QRect(360, 160, 291, 16))
        self.tp_link_label.setStyleSheet("color : rgb(49, 184, 0)")
        self.tp_link_label.setObjectName("tp_link_label")
        self.wep_scroll_area = QtWidgets.QScrollArea(self.centralwidget)
        self.wpa_scroll_area = QtWidgets.QScrollArea(self.centralwidget)
        self.o2_scroll_area = QtWidgets.QScrollArea(self.centralwidget)
        self.tp_link_scroll_area = QtWidgets.QScrollArea(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.show()

        self.button_exit.clicked.connect(self.close)
        self.button_csv_input.clicked.connect(self.csv_input_func)
        self.button_scan.clicked.connect(self.scan)

    def scan(self):

        self.vulnerability_search()
        self.progressBar.setValue(33)
        self.clear_lists()
        self.progressBar.setValue(66)
        self.get_results()
        self.progressBar.setValue(100)
        self.show_results()

    def csv_input_func(self):
        self.text, ok = QInputDialog.getText(self, 'Input Dialog', 'Enter text:')
        print(self.text)
        if os.path.exists(str(self.text)):
            self.csv_label.setText(str(self.text))

        elif not os.path.exists(str(self.text)):
            self.show_dialog()

    def show_dialog(self):
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Warning)
        msg.setText("Path is invalid.  Try again.")
        msg.setWindowTitle("Invalid Path")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.show()
        msg.buttonClicked.connect(self.csv_input_func)
        returnValue = msg.exec()
        if returnValue == QMessageBox.Ok:
            msg.close()

    def vulnerability_search(self):


        with open(self.text, 'r', encoding="utf-8", errors="replace") as csv_file:
            print(Fore.LIGHTGREEN_EX + "[+] " + Fore.LIGHTCYAN_EX + "Analyzing data....")
            text = csv_file.read().splitlines()
            for line in text:
                if ",," in str(line):
                    pass

                if self.wep:

                    if "WEP" and ",," in str(line):
                        pass

                    elif "WEP" in str(line):
                        self.wep_list.append(line)

                if self.wps_o2:

                    if "o2-WLAN" in str(line):
                        self.o2_list.append(line)

                if self.wps_tp_link:
                    if "tp-link" in str(line):
                        self.tp_link_list.append(line)

                    elif "TP-Link" in str(line):
                        self.tp_link_list.append(line)

                if self.wpa:
                    if "WPA-PSK-TKIP" and "WPA2" in str(line):
                        pass

                    elif "WPA-PSK-TKIP" in str(line):
                        self.wpa_list.append(line)

    def clear_lists(self):
        self.cleared_wep_list = {}
        self.cleared_o2_list = {}
        self.cleared_tp_link_list = {}
        self.cleared_wpa_list = {}

        for item in self.wep_list:
            values = item.split(",")
            mac = values[0]
            if mac not in self.cleared_wep_list:
                self.cleared_wep_list[mac] = values

            else:
                pass

        for item in self.o2_list:
            values = item.split(",")
            mac = values[0]
            if mac not in self.cleared_o2_list:
                self.cleared_o2_list[mac] = values

            else:
                pass

        for item in self.tp_link_list:
            values = item.split(",")
            mac = values[0]
            if mac not in self.cleared_tp_link_list:
                self.cleared_tp_link_list[mac] = values

            else:
                pass

        for item in self.wpa_list:
            values = item.split(",")
            mac = values[0]
            if mac not in self.cleared_wpa_list:
                self.cleared_wpa_list[mac] = values

            else:
                pass

    def variables(self):

        if self.conf['WPS']['tp_link'] == 'true':
            self.wps_tp_link = True
            self.wps_tp_link_ext = Fore.LIGHTGREEN_EX + "Enabled"

        elif self.conf['WPS']['tp_link'] == 'false':
            self.wps_tp_link = False
            self.wps_tp_link_ext = Fore.LIGHTRED_EX + "Disabled"

        if self.conf['WPS']['o2'] == 'true':
            self.wps_o2 = True
            self.wps_o2_ext = Fore.LIGHTGREEN_EX + "Enabled"

        elif self.conf['WPS']['o2'] == 'false':
            self.wps_o2 = False
            self.wps_o2_ext = Fore.LIGHTRED_EX + "Disabled"

        if self.conf['WPA']['tkip'] == 'true':
            self.wpa = True
            self.wpa_ext = Fore.LIGHTGREEN_EX + "Enabled"

        elif self.conf['WPA']['tkip'] == 'false':
            self.wpa = False
            self.wpa_ext = Fore.LIGHTRED_EX + "Disabled"

        if self.conf['WEP']['wep'] == 'true':
            self.wep = True
            self.wep_ext = Fore.LIGHTGREEN_EX + "Enabled"

        elif self.conf['WEP']['wep'] == 'false':
            self.wep = False
            self.wep_ext = Fore.LIGHTRED_EX + "Disabled"

        else:
            print("Variables not loaded.")

    def get_results(self):

        self.clear_lists()
        self.wep_length = len(self.cleared_wep_list)
        self.o2_length = len(self.cleared_o2_list)
        self.tp_link_length = len(self.cleared_tp_link_list)
        self.wpa_length = len(self.cleared_wpa_list)
        self.all_length = self.wep_length + self.o2_length + self.tp_link_length + self.wpa_length

    def show_results(self):
        self.show_wep()
        self.show_wpa()
        self.show_o2()
        self.show_tp_link()

    def show_wep(self):
        table = QTableWidget()
        table.setRowCount(len(self.cleared_wep_list))
        table.setColumnCount(4)
        table.setHorizontalHeaderLabels(["MAC", "Name", "Latitude", "Longitude"])
        row = 0
        for mac in self.cleared_wep_list:
            values = self.cleared_wep_list[mac]
            mac = values[0]
            name = values[1]
            gps_latitude = values[6]
            gps_longitude = values[7]
            table.setItem(row, 0, QTableWidgetItem(mac))
            table.setItem(row, 1, QTableWidgetItem(name))
            table.setItem(row, 2, QTableWidgetItem(gps_latitude))
            table.setItem(row, 3, QTableWidgetItem(gps_longitude))

            row += 1

        table.resizeColumnsToContents()
        self.scrollArea.setWidget(table)
        self.scrollArea.show()

    def show_wpa(self):
        table = QTableWidget()
        table.setRowCount(len(self.cleared_wpa_list))
        table.setColumnCount(4)
        table.setHorizontalHeaderLabels(["MAC", "Name", "Latitude", "Longitude"])
        row = 0
        for mac in self.cleared_wpa_list:
            values = self.cleared_wpa_list[mac]
            mac = values[0]
            name = values[1]
            gps_latitude = values[6]
            gps_longitude = values[7]
            table.setItem(row, 0, QTableWidgetItem(mac))
            table.setItem(row, 1, QTableWidgetItem(name))
            table.setItem(row, 2, QTableWidgetItem(gps_latitude))
            table.setItem(row, 3, QTableWidgetItem(gps_longitude))

            row += 1

        table.resizeColumnsToContents()
        self.scrollArea_2.setWidget(table)
        self.scrollArea_2.show()

    def show_o2(self):

        table = QTableWidget()
        table.setRowCount(len(self.cleared_o2_list))
        table.setColumnCount(4)
        table.setHorizontalHeaderLabels(["MAC", "Name", "Latitude", "Longitude"])
        row = 0
        for mac in self.cleared_o2_list:
            values = self.cleared_o2_list[mac]
            mac = values[0]
            name = values[1]
            gps_latitude = values[6]
            gps_longitude = values[7]
            table.setItem(row, 0, QTableWidgetItem(mac))
            table.setItem(row, 1, QTableWidgetItem(name))
            table.setItem(row, 2, QTableWidgetItem(gps_latitude))
            table.setItem(row, 3, QTableWidgetItem(gps_longitude))

            row += 1

        table.resizeColumnsToContents()
        self.scrollArea_3.setWidget(table)
        self.scrollArea_3.show()

    def show_tp_link(self):

        table = QTableWidget()
        table.setRowCount(len(self.cleared_tp_link_list))
        table.setColumnCount(4)
        table.setHorizontalHeaderLabels(["MAC", "Name", "Latitude", "Longitude"])
        row = 0
        for mac in self.cleared_tp_link_list:
            values = self.cleared_tp_link_list[mac]
            mac = values[0]
            name = values[1]
            gps_latitude = values[6]
            gps_longitude = values[7]
            table.setItem(row, 0, QTableWidgetItem(mac))
            table.setItem(row, 1, QTableWidgetItem(name))
            table.setItem(row, 2, QTableWidgetItem(gps_latitude))
            table.setItem(row, 3, QTableWidgetItem(gps_longitude))

            row += 1

        table.resizeColumnsToContents()
        self.scrollArea_4.setWidget(table)
        self.scrollArea_4.show()

    def retranslateUi(self, MainWindow):
        if self.conf["Language"]["english"] == "true" or self.conf["Language"]["not_set"] == 'true':

            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "Wigle Extract"))
            self.button_csv_input.setText(_translate("MainWindow", "Choose CSV"))
            self.button_info.setText(_translate("MainWindow", "Info"))
            self.csv_label.setText(_translate("MainWindow", "CSV:  (you didn\'t choose a csv yet.  Press the button below!)"))
            self.button_settings.setText(_translate("MainWindow", "Settings"))
            self.o2_total_label.setText(_translate("MainWindow", "O2 Networks: "))
            self.button_exit.setText(_translate("MainWindow", "Exit"))
            self.wpa_total_label.setText(_translate("MainWindow", "WPA Networks: "))
            self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
    "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
    "p, li { white-space: pre-wrap; }\n"
    "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
    "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Official Source: https://github.com/echteralsfake/wigle-extract!</p></body></html>"))
            self.wep_total_label.setText(_translate("MainWindow", "WEP Networks: "))
            self.tp_link_networks.setText(_translate("MainWindow", "TP-Link Networks:"))
            self.wpa_networks_label.setText(_translate("MainWindow", "WPA Networks:"))
            self.wep_networks_label.setText(_translate("MainWindow", "WEP Networks:"))
            self.o2_networks_label.setText(_translate("MainWindow", "O2 Networks:"))
            self.button_scan.setText(_translate("MainWindow", "Scan"))
            self.tp_link_label.setText(_translate("MainWindow", "TP-Link Networks: "))

        elif self.conf["Language"]["german"] == 'true':

            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "Wigle Extract"))
            self.button_csv_input.setText(_translate("MainWindow", "CSV auswählen"))
            self.button_info.setText(_translate("MainWindow", "Info"))
            self.csv_label.setText(
                _translate("MainWindow", "CSV:  (Du hast keine CSV Datei ausgewählt. Bitte klicke den Button weiter unten!)"))
            self.button_settings.setText(_translate("MainWindow", "Einstellungen"))
            self.o2_total_label.setText(_translate("MainWindow", "O2 Netzwerke: "))
            self.button_exit.setText(_translate("MainWindow", "Exit"))
            self.wpa_total_label.setText(_translate("MainWindow", "WPA Netzwerke: "))
            self.textBrowser.setHtml(_translate("MainWindow",
                                                "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                                "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                                "p, li { white-space: pre-wrap; }\n"
                                                "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Offizielle Quelle: https://github.com/echteralsfake/wigle-extract!</p></body></html>"))
            self.wep_total_label.setText(_translate("MainWindow", "WEP Netzwerke: "))
            self.tp_link_networks.setText(_translate("MainWindow", "TP-Link Netzwerke:"))
            self.wpa_networks_label.setText(_translate("MainWindow", "WPA Netzwerke:"))
            self.wep_networks_label.setText(_translate("MainWindow", "WEP Netzwerke:"))
            self.o2_networks_label.setText(_translate("MainWindow", "O2 Netzwerke:"))
            self.button_scan.setText(_translate("MainWindow", "Scan"))
            self.tp_link_label.setText(_translate("MainWindow", "TP-Link Netzwerke: "))

app = QtWidgets.QApplication(sys.argv)
windows = Ui_MainWindow()
app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())
sys.exit(app.exec_())